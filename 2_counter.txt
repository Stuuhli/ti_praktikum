library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity counter is 



	port (
		reset_n     : in std_logic; -- Key 3
      clk         : in std_logic; --50 MHz
		switches		: in std_logic_vector(7 downto 0); -- zur Übernahme des ofl-values
		cnt_enable	: in std_logic; -- SW9
		ofl_rd		: in std_logic; -- read and store ofl-value, KEY0
		cnt_rd		: in std_logic; -- read and store the actual count-value, KEY1
		cnt_val_act : out std_logic_vector(7 downto 0); -- aktueller Zählwert
		cnt_val_stored_out : out std_logic_vector(7 downto 0) -- gespeicherter Zählwert
		
		
		);
end entity counter;

architecture arch of counter is

signal clk_counter : unsigned(22 downto 0);
signal cnt_val : unsigned(7 downto 0);
signal cnt_val_stored : unsigned(7 downto 0);
signal cnt_ofl : unsigned(7 downto 0);

begin
	counter : process (clk, reset_n)
	begin
		if (reset_n = '1') then
			cnt_val <= "00000000";
			cnt_val_stored <= cnt_val;
		elsif (clk'event and clk = '1') then				--50MHz
			if (ofl_rd = '1') then
				cnt_ofl <= unsigned(switches);
			end if;
			if (cnt_rd = '1') then
				cnt_val_stored <= cnt_val;
			end if;
			if (cnt_enable = '1') then
				clk_counter <= clk_counter + 1;
				if (clk_counter = "10011000100101101000000") then			--10Hz
					clk_counter <= "00000000000000000000000";
					cnt_val <= cnt_val + 1;
					if (cnt_val >= cnt_ofl) then
						cnt_val <= "00000000";
					end if;
				end if;
			end if;
		end if;
	end process counter;
	
	cnt_val_act <= std_logic_vector(cnt_val);
	cnt_val_stored_out <= std_logic_vector(cnt_val_stored);

end architecture arch;